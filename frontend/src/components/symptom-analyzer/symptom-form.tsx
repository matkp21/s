
"use client";

import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import type { SymptomAnalyzerOutput } from '@/ai/agents/SymptomAnalyzerAgent';
import { useToast } from '@/hooks/use-toast';
import { Send } from 'lucide-react';
import { Input } from '../ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';

// Define the shape of the data we expect from the Python API
// This can be expanded later.
interface SymptomApiResponse {
    diagnoses: {
        name: string;
        confidence: 'High' | 'Medium' | 'Low' | 'Possible';
        rationale: string;
    }[];
    disclaimer: string;
}

const formSchema = z.object({
  symptoms: z.string().min(10, { message: "Please describe symptoms in at least 10 characters." }),
  age: z.coerce.number().int().positive().optional(),
  sex: z.enum(['male', 'female', 'other']).optional(),
  history: z.string().optional(),
});

type SymptomFormValues = z.infer<typeof formSchema>;

interface SymptomFormProps {
  onAnalysisComplete: (result: SymptomAnalyzerOutput | null, error?: string) => void;
  setIsLoading: (loading: boolean) => void;
  isLoading: boolean;
}

export function SymptomForm({ onAnalysisComplete, setIsLoading, isLoading }: SymptomFormProps) {
  const { toast } = useToast();
  const form = useForm<SymptomFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      symptoms: "",
      age: undefined,
      sex: undefined,
      history: "",
    },
  });

  const onSubmit: SubmitHandler<SymptomFormValues> = async (data) => {
    setIsLoading(true);
    onAnalysisComplete(null); 

    try {
      const response = await fetch(`${process.env.NEXT_PUBLIC_BACKEND_URL}/api/analyze-symptoms`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
      });

      if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.detail || 'The backend returned an error.');
      }

      const result: SymptomAnalyzerOutput = await response.json();
      onAnalysisComplete(result);
      toast({
        title: "Analysis Complete",
        description: "Potential diagnoses have been generated by the backend.",
      });
    } catch (error) {
      console.error("Symptom analysis error:", error);
      const errorMessage = error instanceof Error ? error.message : "An unknown error occurred during analysis.";
      onAnalysisComplete(null, errorMessage);
      toast({
        title: "Analysis Failed",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="symptoms"
          render={({ field }) => (
            <FormItem>
              <FormLabel htmlFor="symptoms-input" className="text-foreground/90">Symptoms Description</FormLabel>
              <FormControl>
                <Textarea
                  id="symptoms-input"
                  placeholder="e.g., persistent cough, fever for 3 days, headache..."
                  className="min-h-[150px] resize-y rounded-lg border-border/70 focus:border-primary"
                  aria-describedby="symptoms-description"
                  {...field}
                />
              </FormControl>
              <FormDescription id="symptoms-description">
                Provide as much detail as possible for a more relevant analysis.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <div className="grid grid-cols-2 gap-4">
           <FormField
              control={form.control}
              name="age"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Age (Optional)</FormLabel>
                  <FormControl>
                    <Input type="number" placeholder="e.g., 45" {...field} onChange={e => field.onChange(e.target.value === '' ? undefined : +e.target.value)} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
             <FormField
              control={form.control}
              name="sex"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Biological Sex (Optional)</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="Select sex" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      <SelectItem value="male">Male</SelectItem>
                      <SelectItem value="female">Female</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
        </div>
         <FormField
              control={form.control}
              name="history"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Brief History (Optional)</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Smoker, Hypertensive" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
        <Button type="submit" className="w-full rounded-lg py-3 text-base group" disabled={isLoading} aria-label="Submit symptoms for analysis">
          Analyze
          <Send className="ml-2 h-4 w-4 transition-transform duration-300 group-hover:translate-x-1" />
        </Button>
      </form>
    </Form>
  );
}
